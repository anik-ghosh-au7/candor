{"version":3,"sources":["../../src/controller/post.controller.js"],"names":["Post","require","validationResult","ObjectId","app","post_controller","createPost","req","res","errors","isEmpty","status","json","array","hitUrl","encodeURIComponent","body","url","category","findOne","err","data","send","msg","tag","post_body","match","entry","post","username","post_tags","save","message","redirect","findOneAndUpdate","console","log","createComment","current_url","post_id","comment_body","comment_username","comment_tags","then","result","renderPost","decodeURIComponent","query","limit","page","parseInt","endIndex","search_by_username","search_username","sort_likes","aggregate","$match","$unwind","total_length","length","$addFields","upvote_count","$size","$sort","$skip","$limit","exec","has_next","next_page","has_prev","prev_page","attach_likes","user","name","render","posts","viewername","getdata","question","admin","related","others","updateLike","like_search_result","add_like","id","upvote_username","delete_like","getTrendingTags","final_result","$group","forEach","element","_id","count","sortable","push","sort","a","b","final_str","slice","elem","module","exports","post_outer","user_like","like_count","upvote_users","sortFunction"],"mappings":"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","sourcesContent":["const Post = require('../model/post.model');\nconst {validationResult} = require('express-validator');\nvar ObjectId = require('mongodb').ObjectId\n\nvar app = {};\n\nconst post_controller = {\n    createPost: (req, res) => {\n        const errors = validationResult(req);\n        if (!errors.isEmpty()) {\n            return res.status(422).json({errors: errors.array()});\n        }\n        ;\n        let hitUrl = `/post/render?current_url=${encodeURIComponent(req.body.url)}&category=${req.body.category}&page=1`;\n        Post.findOne({url: req.body.url}, (err, data) => {\n            if (err) {\n                res.status(500).send({msg: \"Internal Server Error\"});\n            } else {\n\n                var tag = req.body.post_body.match(/(#[\\w!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+)/g);\n                if (!data) {\n                    let entry = new Post({\n                        url: req.body.url,\n                        post: [{\n                            username: req.body.username,\n                            category: req.body.category,\n                            post_tags: tag,\n                            post_body: req.body.post_body\n                        }]\n                    });\n                    entry.save(function (err) {\n                        if (err) {\n                            res.status(406).send(err.message);\n                        } else {\n                            return res.redirect(hitUrl);\n                        }\n                    });\n                } else {\n                    Post.findOneAndUpdate({url: req.body.url},\n                        {\n                            \"$push\": {\n                                \"post\": {\n                                    username: req.body.username,\n                                    category: req.body.category,\n                                    post_tags: tag,\n                                    post_body: req.body.post_body\n                                }\n                            }\n                        }, {\"new\": true},\n                        function (err) {\n                            if (err) console.log(err);\n                            res.redirect(hitUrl);\n                        }\n                    );\n                }\n            }\n\n        })\n\n    },\n    createComment: (req, res) => {\n\n        let current_url = req.body.url;\n        let post_id = req.body.post_id;\n        var tag = req.body.comment_body.match(/(#[\\w!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+)/g);\n\n        Post.findOneAndUpdate({url: current_url, \"post._id\": post_id},\n            {\n                \"$push\": {\n                    \"post.$.comments\": {\n                        comment_username: req.body.username,\n                        comment_tags: tag,\n                        comment_body: req.body.comment_body\n                    }\n                }\n            }, {\"new\": true})\n            .then((result) => {\n                let hitUrl = `/post/render?current_url=${encodeURIComponent(current_url)}&category=${req.body.category}`;\n                res.redirect(hitUrl)\n            })\n            .catch(err => console.log(err));\n\n    },\n    renderPost: async (req, res) => {\n        let current_url = decodeURIComponent(req.query.current_url);\n        let category = req.query.category;\n        let limit = 3;\n        let page = parseInt(req.query.page);\n        const endIndex = page * limit;\n        let total_length;\n        let query;\n        let search_by_username = req.query.search_username;\n        let sort_likes = req.query.sort_likes;\n\n        if (sort_likes) {\n            if (search_by_username) {\n                await Post.aggregate([{$match: {url: current_url}}, {$unwind: '$post'}, {\n                    $match: {\n                        'post.category': category,\n                        'post.username': search_by_username\n                    }\n                }]).then(result => total_length = result.length).catch(err => console.log(err));\n                query = Post.aggregate([{$match: {url: current_url}}, {$unwind: '$post'}, {\n                    $match: {\n                        'post.category': category,\n                        'post.username': search_by_username\n                    }\n                }, {$addFields: {upvote_count: {$size: \"$post.upvote_users\"}}}, {\n                    $sort: {\n                        \"upvote_count\": -1,\n                        'post.post_time': -1\n                    }\n                }, {$skip: (page - 1) * limit}, {$limit: limit}])\n            } else {\n                await Post.aggregate([{$match: {url: current_url}}, {$unwind: '$post'}, {$match: {'post.category': category}}]).then(result => total_length = result.length).catch(err => console.log(err));\n                query = Post.aggregate([{$match: {url: current_url}}, {$unwind: '$post'}, {$match: {'post.category': category}}, {$addFields: {upvote_count: {$size: \"$post.upvote_users\"}}}, {\n                    $sort: {\n                        \"upvote_count\": -1,\n                        'post.post_time': -1\n                    }\n                }, {$skip: (page - 1) * limit}, {$limit: limit}])\n            }\n        } else {\n            if (search_by_username) {\n                await Post.aggregate([{$match: {url: current_url}}, {$unwind: '$post'}, {\n                    $match: {\n                        'post.category': category,\n                        'post.username': search_by_username\n                    }\n                }]).then(result => total_length = result.length).catch(err => console.log(err));\n                query = Post.aggregate([{$match: {url: current_url}}, {$unwind: '$post'}, {\n                    $match: {\n                        'post.category': category,\n                        'post.username': search_by_username\n                    }\n                }, {$sort: {'post.post_time': -1}}, {$skip: (page - 1) * limit}, {$limit: limit}])\n            } else {\n                await Post.aggregate([{$match: {url: current_url}}, {$unwind: '$post'}, {$match: {'post.category': category}}]).then(result => total_length = result.length).catch(err => console.log(err));\n                query = Post.aggregate([{$match: {url: current_url}}, {$unwind: '$post'}, {$match: {'post.category': category}}, {$sort: {'post.post_time': -1}}, {$skip: (page - 1) * limit}, {$limit: limit}])\n            }\n        }\n\n        query.exec()\n            .then(result => {\n                if (endIndex >= total_length) {\n                    result.has_next = false;\n                } else {\n                    result.has_next = true;\n                    result.next_page = page + 1\n                }\n                if (page === 1) {\n                    result.has_prev = false;\n                } else {\n                    result.has_prev = true;\n                    result.prev_page = page - 1\n                }\n                // console.log(result);\n\n                attach_likes(result, req.user.name);\n\n                res.render('index', {\n                    posts: result,\n                    url: current_url,\n                    viewername: req.user.name,\n                    category,\n                    user: req.user\n                })\n            })\n            .catch(err => console.log(err));\n    },\n    getdata: async (req, res) => {\n        let current_url = decodeURIComponent(req.query.current_url);\n        let data = {};\n        await Post.aggregate([{$match: {url: current_url}}, {$unwind: '$post'}, {$match: {'post.category': 'question'}}]).then(result => {\n            data.question = result.length\n        });\n        await Post.aggregate([{$match: {url: current_url}}, {$unwind: '$post'}, {$match: {'post.category': 'admin'}}]).then(result => {\n            data.admin = result.length\n        });\n        await Post.aggregate([{$match: {url: current_url}}, {$unwind: '$post'}, {$match: {'post.category': 'related'}}]).then(result => {\n            data.related = result.length\n        });\n        await Post.aggregate([{$match: {url: current_url}}, {$unwind: '$post'}, {$match: {'post.category': 'others'}}]).then(result => {\n            data.others = result.length\n        });\n        res.status(200).send(data);\n    },\n    updateLike: async (req, res) => {\n        let current_url = decodeURIComponent(req.query.current_url);\n        let post_id = req.query.post_id;\n        let like_search_result = {};\n\n        const add_like = (url, id, name) => {\n            Post.findOneAndUpdate({url: url, \"post._id\": id},\n                {\n                    \"$push\": {\n                        \"post.$.upvote_users\": {\n                            upvote_username: name\n                        }\n                    }\n                }, {\"new\": true})\n                .then((result) => {\n                    res.send('liked');\n                })\n                .catch(err => console.log(err));\n        };\n        const delete_like = (url, id, name) => {\n            Post.findOneAndUpdate({url: url, \"post._id\": id},\n                {\n                    \"$pull\": {\n                        \"post.$.upvote_users\": {\n                            upvote_username: name\n                        }\n                    }\n                }, {\"new\": true})\n                .then((result) => {\n                    res.send('unliked');\n                })\n                .catch(err => console.log(err));\n        };\n\n        await Post.aggregate([{$match: {url: current_url}}, {$unwind: '$post'}, {$match: {'post._id': ObjectId(post_id)}}, {$unwind: '$post.upvote_users'}, {$match: {'post.upvote_users.upvote_username': req.user.name}}])\n            .then((result) => {\n                like_search_result[req.user.name] = result;\n                if (like_search_result[req.user.name].length === 0) {\n                    add_like(current_url, post_id, req.user.name);\n                } else {\n                    delete_like(current_url, post_id, req.user.name);\n                }\n                ;\n                delete like_search_result[req.user.name];\n            })\n            .catch(err => console.log(err));\n\n    },\n    getTrendingTags: async (req, res) => {\n        // res.send(\"tags will appear here\");\n        let current_url = decodeURIComponent(req.query.current_url);\n        let category = req.query.category;\n        let final_result = {};\n        await Post.aggregate([{$match: {url: current_url}},\n            {$unwind: '$post'},\n            {$match: {'post.category': category}},\n            {$match: {'post.post_tags': {\"$exists\": true, \"$ne\": null}}},\n            {$unwind: '$post.post_tags'},\n            {$group: {'_id': {'post_tags': '$post.post_tags'}, 'count': {'$sum': 1}}}])\n            .then(result => {\n                result.forEach(element => {\n                    final_result[element._id.post_tags] = element.count;\n                });\n            })\n            .catch(err => console.log(err))\n\n        await Post.aggregate([{$match: {url: current_url}},\n            {$unwind: '$post'},\n            {$match: {'post.category': category}},\n            {$unwind: '$post.comments'},\n            {$match: {'post.comments.comment_tags': {\"$exists\": true, \"$ne\": null}}},\n            {$unwind: '$post.comments.comment_tags'},\n            {$group: {'_id': {'comment_tags': '$post.comments.comment_tags'}, 'count': {'$sum': 1}}}])\n            .then(result => {\n                    result.forEach(element => {\n                        if (!final_result[element._id.comment_tags]) {\n                            final_result[element._id.comment_tags] = element.count;\n                        } else {\n                            final_result[element._id.comment_tags] += element.count;\n                        }\n                    });\n                    let sortable = [];\n                    for (let result in final_result) {\n                        sortable.push([result, final_result[result]]);\n                    }\n\n                    sortable.sort(function (a, b) {\n                        return b[1] - a[1];\n                    });\n                    let final_str = '';\n                    sortable = sortable.slice(0, 10);\n                    sortable.forEach(elem => final_str += `${elem[0]} : ${elem[1]}` + '\\n');\n                    res.send(final_str)\n                }\n            )\n            .catch(err => console.log(err))\n    }\n};\nmodule.exports = {post_controller, app};\n\nfunction attach_likes(result, name) {\n    let post_outer;\n    for (post_outer of result) {\n        post_outer.post.user_like = false;\n        post_outer.post.like_count = post_outer.post.upvote_users.length;\n        let user;\n        for (user of post_outer.post.upvote_users) {\n            if (user.upvote_username === name) {\n                post_outer.post.user_like = true;\n            }\n        }\n    }\n}\n\nfunction sortFunction(a, b) {\n    if (a[0] === b[0]) {\n        return 0;\n    } else {\n        return (a[0] < b[0]) ? -1 : 1;\n    }\n}\n"],"file":"post.controller.js"}
{"version":3,"sources":["../../src/controller/chat.controller.js"],"names":["formatMessage","username","text","time","format","toString","botName","authenticateToken","token","res","redirect","jwt","verify","process","env","jwt_key","err","user","status","send","msg","console","log","name","webSocket","server","io","on","socket","clientId","handshake","headers","split","room","dbInterface","userJoin","join","emit","broadcast","to","users","getRoomUsers","full_msg","saveChatHistory","userLeave","module","exports"],"mappings":"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","sourcesContent":["import ioLib from 'socket.io';\r\nimport jwt from 'jsonwebtoken';\r\nimport moment from 'moment';\r\nimport dbInterface from './chat.db.interface';\r\n\r\nfunction formatMessage(username, text) {\r\n    return {\r\n        username,\r\n        text,\r\n        time: moment().format('h:mm a DD-MM-yy').toString()\r\n    };\r\n}\r\n\r\nconst botName = 'Candor Admin';\r\n\r\nconst authenticateToken = (token) => {\r\n    let username;\r\n    if (!token) {\r\n        return res.redirect('/users/loginPage');\r\n    }\r\n    jwt.verify(token, process.env.jwt_key, (err, user) => {\r\n        if (err) return res.status(403).send({msg: 'Unauthorized Forbidden'});\r\n        console.log(user);\r\n        username=user.name;\r\n        // return user.name;\r\n    });\r\n    return username;\r\n};\r\n\r\nconst webSocket = (server) => {\r\n    const io = ioLib(server);\r\n    io.on('connection', socket => {\r\n        let clientId = socket.handshake.headers['x-clientid'];\r\n        let username = authenticateToken(clientId.split('=')[1]);\r\n        let room = socket.handshake.headers['room'];\r\n        console.log('new socket connection established');\r\n        socket.on('joinRoom', () => {\r\n            dbInterface.userJoin(username, room);\r\n            socket.join(room);\r\n            // Welcome current user\r\n            socket.emit('message', formatMessage(botName, 'Welcome to Candor!'));\r\n\r\n            // Broadcast when a user connects\r\n            socket.broadcast\r\n                .to(room)\r\n                .emit(\r\n                    'message',\r\n                    formatMessage(botName, `${username} has joined the chat`)\r\n                );\r\n\r\n            // Send users and room info\r\n            io.to(room).emit('roomUsers', {\r\n            room: room,\r\n            users: dbInterface.getRoomUsers(room)\r\n            });\r\n        });\r\n\r\n        // Listen for chatMessage\r\n        socket.on('chatMessage', msg => {\r\n            let full_msg = formatMessage(username, msg);\r\n            dbInterface.saveChatHistory(room, username, full_msg.text, full_msg.time);\r\n            io.to(room).emit('message', formatMessage(username, msg));\r\n        });\r\n\r\n        // Runs when client disconnects\r\n        socket.on('disconnect', () => {\r\n            const user = dbInterface.userLeave(username, room);\r\n\r\n            io.to(room).emit(\r\n                'message',\r\n                formatMessage(botName, `${username} has left the chat`)\r\n            );\r\n\r\n            // Send users and room info\r\n            io.to(room).emit('roomUsers', {\r\n                room: room,\r\n                users: dbInterface.getRoomUsers(room)\r\n            });\r\n\r\n        });\r\n    });\r\n};\r\n\r\n\r\n\r\nmodule.exports = webSocket;\r\n"],"file":"chat.controller.js"}
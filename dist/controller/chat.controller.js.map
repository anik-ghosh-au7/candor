{"version":3,"sources":["../../src/controller/chat.controller.js"],"names":["users","userJoin","username","room","user","push","userLeave","index","findIndex","splice","getRoomUsers","filter","formatMessage","text","time","format","botName","authenticateToken","token","res","redirect","jwt","verify","process","env","jwt_key","err","status","send","msg","console","log","name","webSocket","server","io","on","socket","clientId","handshake","headers","split","join","emit","broadcast","to","module","exports"],"mappings":"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","sourcesContent":["import ioLib from 'socket.io';\r\nimport jwt from 'jsonwebtoken';\r\nimport moment from 'moment';\r\nconst users = [];\r\n\r\n// Join user to chat\r\nfunction userJoin( username, room) {\r\n  const user = { username, room };\r\n\r\n  users.push(user);\r\n}\r\n\r\n// User leaves chat\r\nfunction userLeave(username) {\r\n  const index = users.findIndex(user => user.username === username);\r\n\r\n  if (index !== -1) {\r\n    return users.splice(index, 1)[0];\r\n  }\r\n}\r\n\r\n// Get room users\r\nfunction getRoomUsers(room) {\r\n  return users.filter(user => user.room === room);\r\n}\r\n\r\nfunction formatMessage(username, text) {\r\n    return {\r\n        username,\r\n        text,\r\n        time: moment().format('h:mm a')\r\n    };\r\n}\r\n\r\nconst botName = 'Candor Admin';\r\n\r\nconst authenticateToken = (token) => {\r\n    let username;\r\n    if (!token) {\r\n        return res.redirect('/users/loginPage');\r\n    }\r\n    jwt.verify(token, process.env.jwt_key, (err, user) => {\r\n        if (err) return res.status(403).send({msg: 'Unauthorized Forbidden'});\r\n        console.log(user);\r\n        username=user.name;\r\n        // return user.name;\r\n    });\r\n    return username;\r\n};\r\n\r\nconst webSocket = (server) => {\r\n    const io = ioLib(server);\r\n    // io.use((socket, next) => {\r\n    //     let clientId = socket.handshake.headers['x-clientid'];\r\n    //     console.log('from io');\r\n    //     let username = authenticateToken(clientId.split('=')[1]);\r\n    //     let room = socket.handshake.headers['room'];\r\n    //     next()\r\n    // });\r\n    // Run when client connects\r\n    io.on('connection', socket => {\r\n        let clientId = socket.handshake.headers['x-clientid'];\r\n        let username = authenticateToken(clientId.split('=')[1]);\r\n        let room = socket.handshake.headers['room'];\r\n        console.log('new socket connection established');\r\n        socket.on('joinRoom', () => {\r\n            userJoin(username, room);\r\n            socket.join(room);\r\n            // Welcome current user\r\n            socket.emit('message', formatMessage(botName, 'Welcome to Candor!'));\r\n\r\n            // Broadcast when a user connects\r\n            socket.broadcast\r\n                .to(room)\r\n                .emit(\r\n                    'message',\r\n                    formatMessage(botName, `${username} has joined the chat`)\r\n                );\r\n\r\n            // Send users and room info\r\n            io.to(room).emit('roomUsers', {\r\n            room: room,\r\n            users: getRoomUsers(room)\r\n            });\r\n        });\r\n\r\n        // Listen for chatMessage\r\n        socket.on('chatMessage', msg => {\r\n            io.to(room).emit('message', formatMessage(username, msg));\r\n        });\r\n\r\n        // Runs when client disconnects\r\n        socket.on('disconnect', () => {\r\n            const user = userLeave(username);\r\n\r\n            if (user) {\r\n            io.to(room).emit(\r\n                'message',\r\n                formatMessage(botName, `${username} has left the chat`)\r\n            );\r\n\r\n            // Send users and room info\r\n            io.to(room).emit('roomUsers', {\r\n                room: room,\r\n                users: getRoomUsers(room)\r\n            });\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\nmodule.exports = webSocket;\r\n"],"file":"chat.controller.js"}
{"version":3,"sources":["../../src/controller/chat.controller.js"],"names":["formatMessage","username","text","time","utcOffset","format","toString","botName","authenticateToken","token","jwt","verify","process","env","jwt_key","err","user","name","webSocket","server","io","on","socket","clientId","handshake","headers","split","room","console","log","dbInterface","userJoin","join","getChatHistory","result","emit","broadcast","to","getRoomUsers","users","msg","full_msg","saveChatHistory","userLeave","module","exports"],"mappings":"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","sourcesContent":["import ioLib from 'socket.io';\nimport jwt from 'jsonwebtoken';\nimport moment from 'moment';\nimport dbInterface from './chat.db.interface';\n\nfunction formatMessage(username, text) {\n    return {\n        username,\n        text,\n        time: moment().utcOffset(330).format('h:mm=ss:S= a DD-MM-yy').toString()\n    };\n}\n\nconst botName = 'Candor Admin';\n\nconst authenticateToken = (token) => {\n    let username;\n    jwt.verify(token, process.env.jwt_key, (err, user) => {\n        username = user.name;\n    });\n    return username;\n};\n\nconst webSocket = (server) => {\n    const io = ioLib(server);\n    io.on('connection', socket => {\n        let clientId = socket.handshake.headers['x-clientid'];\n        let username = authenticateToken(clientId.split('=')[1]);\n        let room = socket.handshake.headers['room'];\n        console.log('new socket connection established', username);\n        socket.on('joinRoom', async () => {\n            await dbInterface.userJoin(username, room);\n            socket.join(room);\n            //Loads chat history\n            // socket.emit('load_messages',await dbInterface.getChatHistory(room));\n\n            let result = await dbInterface.getChatHistory(room);\n            socket.emit('load_messages',result);\n\n            // Welcome current user\n            socket.emit('message', formatMessage(botName, 'Welcome to Candor!'));\n\n            // Broadcast when a user connects\n            socket.broadcast\n                .to(room)\n                .emit(\n                    'message',\n                    formatMessage(botName, `${username} has joined the chat`)\n                );\n\n            // Send users and room info\n            io.to(room).emit('roomUsers', {\n                room: room,\n                users: await dbInterface.getRoomUsers(room)\n            });\n            console.log('AFTER roomUsers');\n        });\n\n        // Listen for chatMessage\n        socket.on('chatMessage',async (msg) => {\n            let full_msg = formatMessage(username, msg);\n            await dbInterface.saveChatHistory(room, username, full_msg.text, full_msg.time);\n            io.to(room).emit('message', formatMessage(username, msg));\n        });\n\n        // Runs when client disconnects\n        socket.on('disconnect',async () => {\n            const user = await dbInterface.userLeave(username, room);\n\n            io.to(room).emit(\n                'message',\n                formatMessage(botName, `${username} has left the chat`)\n            );\n\n            // Send users and room info\n            io.to(room).emit('roomUsers', {\n                room: room,\n                users: await dbInterface.getRoomUsers(room)\n            });\n\n        });\n    });\n};\n\n\nmodule.exports = webSocket;\n"],"file":"chat.controller.js"}
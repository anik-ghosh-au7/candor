{"version":3,"sources":["../../src/controller/chat.controller.js"],"names":["userJoin","username","room","Chat","findOneAndUpdate","room_name","upsert","then","result","console","log","err","userLeave","getRoomUsers","findOne","room_users","active_users","formatMessage","text","time","format","toString","botName","authenticateToken","token","res","redirect","jwt","verify","process","env","jwt_key","user","status","send","msg","name","webSocket","server","io","on","socket","clientId","handshake","headers","split","join","emit","broadcast","to","users","full_msg","saveChatHistory","body","module","exports"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;AACA,SAASA,QAAT,CAAmBC,QAAnB,EAA6BC,IAA7B,EAAmC;AAC/BC,mBAAKC,gBAAL,CAAsB;AAACC,IAAAA,SAAS,EAAEH;AAAZ,GAAtB,EACY;AACI,iBAAa;AACT,sBAAgBD;AADP;AADjB,GADZ,EAKe;AAAEK,IAAAA,MAAM,EAAG;AAAX,GALf,EAMaC,IANb,CAMkB,UAACC,MAAD,EAAY;AACdC,IAAAA,OAAO,CAACC,GAAR,WAAeT,QAAf,0BAAuCC,IAAvC;AACH,GARb,WASmB,UAAAS,GAAG;AAAA,WAAIF,OAAO,CAACC,GAAR,CAAYC,GAAZ,CAAJ;AAAA,GATtB;AAUD,C,CAEH;;;AACA,SAASC,SAAT,CAAmBX,QAAnB,EAA6BC,IAA7B,EAAmC;AAC/BC,mBAAKC,gBAAL,CAAsB;AAACC,IAAAA,SAAS,EAAEH;AAAZ,GAAtB,EACI;AACI,aAAS;AACL,sBAAgBD;AADX;AADb,GADJ,EAMKM,IANL,CAMU,UAACC,MAAD,EAAY;AACdC,IAAAA,OAAO,CAACC,GAAR,WAAeT,QAAf,wBAAqCC,IAArC;AACH,GARL,WASW,UAAAS,GAAG;AAAA,WAAIF,OAAO,CAACC,GAAR,CAAYC,GAAZ,CAAJ;AAAA,GATd;AAUH,C,CAED;;;SACeE,Y;;;;;gGAAf,iBAA4BX,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEUC,iBAAKW,OAAL,CAAa;AAACT,cAAAA,SAAS,EAACH;AAAX,aAAb,EAA+BK,IAA/B,CAAoC,UAAAC,MAAM;AAAA,qBAAIO,UAAU,GAAGP,MAAM,CAACQ,YAAxB;AAAA,aAA1C,WAAsF,UAAAL,GAAG;AAAA,qBAAIF,OAAO,CAACC,GAAR,CAAYC,GAAZ,CAAJ;AAAA,aAAzF,CAFV;;AAAA;AAAA,6CAGWI,UAHX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAMA,SAASE,aAAT,CAAuBhB,QAAvB,EAAiCiB,IAAjC,EAAuC;AACnC,SAAO;AACHjB,IAAAA,QAAQ,EAARA,QADG;AAEHiB,IAAAA,IAAI,EAAJA,IAFG;AAGHC,IAAAA,IAAI,EAAE,0BAASC,MAAT,CAAgB,iBAAhB,EAAmCC,QAAnC;AAHH,GAAP;AAKH;;AAED,IAAMC,OAAO,GAAG,cAAhB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AACjC,MAAIvB,QAAJ;;AACA,MAAI,CAACuB,KAAL,EAAY;AACR,WAAOC,GAAG,CAACC,QAAJ,CAAa,kBAAb,CAAP;AACH;;AACDC,2BAAIC,MAAJ,CAAWJ,KAAX,EAAkBK,OAAO,CAACC,GAAR,CAAYC,OAA9B,EAAuC,UAACpB,GAAD,EAAMqB,IAAN,EAAe;AAClD,QAAIrB,GAAJ,EAAS,OAAOc,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAE;AAAN,KAArB,CAAP;AACT1B,IAAAA,OAAO,CAACC,GAAR,CAAYsB,IAAZ;AACA/B,IAAAA,QAAQ,GAAC+B,IAAI,CAACI,IAAd,CAHkD,CAIlD;AACH,GALD;;AAMA,SAAOnC,QAAP;AACH,CAZD;;AAcA,IAAMoC,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAAY;AAC1B,MAAMC,EAAE,GAAG,wBAAMD,MAAN,CAAX;AACAC,EAAAA,EAAE,CAACC,EAAH,CAAM,YAAN,EAAoB,UAAAC,MAAM,EAAI;AAC1B,QAAIC,QAAQ,GAAGD,MAAM,CAACE,SAAP,CAAiBC,OAAjB,CAAyB,YAAzB,CAAf;AACA,QAAI3C,QAAQ,GAAGsB,iBAAiB,CAACmB,QAAQ,CAACG,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAD,CAAhC;AACA,QAAI3C,IAAI,GAAGuC,MAAM,CAACE,SAAP,CAAiBC,OAAjB,CAAyB,MAAzB,CAAX;AACAnC,IAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACA+B,IAAAA,MAAM,CAACD,EAAP,CAAU,UAAV,EAAsB,YAAM;AACxBxC,MAAAA,QAAQ,CAACC,QAAD,EAAWC,IAAX,CAAR;AACAuC,MAAAA,MAAM,CAACK,IAAP,CAAY5C,IAAZ,EAFwB,CAGxB;;AACAuC,MAAAA,MAAM,CAACM,IAAP,CAAY,SAAZ,EAAuB9B,aAAa,CAACK,OAAD,EAAU,oBAAV,CAApC,EAJwB,CAMxB;;AACAmB,MAAAA,MAAM,CAACO,SAAP,CACKC,EADL,CACQ/C,IADR,EAEK6C,IAFL,CAGQ,SAHR,EAIQ9B,aAAa,CAACK,OAAD,YAAarB,QAAb,0BAJrB,EAPwB,CAcxB;;AACAsC,MAAAA,EAAE,CAACU,EAAH,CAAM/C,IAAN,EAAY6C,IAAZ,CAAiB,WAAjB,EAA8B;AAC9B7C,QAAAA,IAAI,EAAEA,IADwB;AAE9BgD,QAAAA,KAAK,EAAErC,YAAY,CAACX,IAAD;AAFW,OAA9B;AAIH,KAnBD,EAL0B,CA0B1B;;AACAuC,IAAAA,MAAM,CAACD,EAAP,CAAU,aAAV,EAAyB,UAAAL,GAAG,EAAI;AAC5B,UAAIgB,QAAQ,GAAGlC,aAAa,CAAChB,QAAD,EAAWkC,GAAX,CAA5B;AACAiB,MAAAA,eAAe,CAAClD,IAAD,EAAOD,QAAP,EAAiBkD,QAAQ,CAACjC,IAA1B,EAAgCiC,QAAQ,CAAChC,IAAzC,CAAf;AACAoB,MAAAA,EAAE,CAACU,EAAH,CAAM/C,IAAN,EAAY6C,IAAZ,CAAiB,SAAjB,EAA4B9B,aAAa,CAAChB,QAAD,EAAWkC,GAAX,CAAzC;AACH,KAJD,EA3B0B,CAiC1B;;AACAM,IAAAA,MAAM,CAACD,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC1B,UAAMR,IAAI,GAAGpB,SAAS,CAACX,QAAD,EAAWC,IAAX,CAAtB;;AAEA,UAAI8B,IAAJ,EAAU;AACVO,QAAAA,EAAE,CAACU,EAAH,CAAM/C,IAAN,EAAY6C,IAAZ,CACI,SADJ,EAEI9B,aAAa,CAACK,OAAD,YAAarB,QAAb,wBAFjB,EADU,CAMV;;AACAsC,QAAAA,EAAE,CAACU,EAAH,CAAM/C,IAAN,EAAY6C,IAAZ,CAAiB,WAAjB,EAA8B;AAC1B7C,UAAAA,IAAI,EAAEA,IADoB;AAE1BgD,UAAAA,KAAK,EAAErC,YAAY,CAACX,IAAD;AAFO,SAA9B;AAIC;AACJ,KAfD;AAgBH,GAlDD;AAmDH,CArDD;;AAuDA,SAASkD,eAAT,CAAyBlD,IAAzB,EAA+BD,QAA/B,EAAyCoD,IAAzC,EAA+ClC,IAA/C,EAAqD;AACjDhB,mBAAKC,gBAAL,CAAsB;AAACC,IAAAA,SAAS,EAAEH;AAAZ,GAAtB,EACI;AACI,aAAS;AACL,sBAAgB;AACZD,QAAAA,QAAQ,EAARA,QADY;AAEZkB,QAAAA,IAAI,EAAJA,IAFY;AAGZkC,QAAAA,IAAI,EAAJA;AAHY;AADX;AADb,GADJ,EASO;AAAE/C,IAAAA,MAAM,EAAG;AAAX,GATP,EAUKC,IAVL,CAUU,UAACC,MAAD,EAAY;AACdC,IAAAA,OAAO,CAACC,GAAR;AACH,GAZL,WAaW,UAAAC,GAAG;AAAA,WAAIF,OAAO,CAACC,GAAR,CAAYC,GAAZ,CAAJ;AAAA,GAbd;AAcH;;AAED2C,MAAM,CAACC,OAAP,GAAiBlB,SAAjB","sourcesContent":["import ioLib from 'socket.io';\nimport jwt from 'jsonwebtoken';\nimport moment from 'moment';\nimport Chat from '../model/chat.model';\n\n// Join user to chat\nfunction userJoin( username, room) {\n    Chat.findOneAndUpdate({room_name: room}, \n                {\n                    \"$addToSet\": {\n                        \"active_users\": username\n                    }\n                }, { upsert : true })\n                .then((result) => {\n                    console.log(`${username} joined room ${room}`);\n                })\n                .catch(err => console.log(err));\n  }\n\n// User leaves chat\nfunction userLeave(username, room) {\n    Chat.findOneAndUpdate({room_name: room}, \n        {\n            \"$pull\": {\n                \"active_users\": username\n            }\n        })\n        .then((result) => {\n            console.log(`${username} left room ${room}`);\n        })\n        .catch(err => console.log(err));\n}\n\n// Get room users\nasync function getRoomUsers(room) {\n    let room_users;\n    await Chat.findOne({room_name:room}).then(result => room_users = result.active_users).catch(err => console.log(err));\n    return room_users;\n  }\n\nfunction formatMessage(username, text) {\n    return {\n        username,\n        text,\n        time: moment().format('h:mm a DD-MM-yy').toString()\n    };\n}\n\nconst botName = 'Candor Admin';\n\nconst authenticateToken = (token) => {\n    let username;\n    if (!token) {\n        return res.redirect('/users/loginPage');\n    }\n    jwt.verify(token, process.env.jwt_key, (err, user) => {\n        if (err) return res.status(403).send({msg: 'Unauthorized Forbidden'});\n        console.log(user);\n        username=user.name;\n        // return user.name;\n    });\n    return username;\n};\n\nconst webSocket = (server) => {\n    const io = ioLib(server);\n    io.on('connection', socket => {\n        let clientId = socket.handshake.headers['x-clientid'];\n        let username = authenticateToken(clientId.split('=')[1]);\n        let room = socket.handshake.headers['room'];\n        console.log('new socket connection established');\n        socket.on('joinRoom', () => {\n            userJoin(username, room);\n            socket.join(room);\n            // Welcome current user\n            socket.emit('message', formatMessage(botName, 'Welcome to Candor!'));\n\n            // Broadcast when a user connects\n            socket.broadcast\n                .to(room)\n                .emit(\n                    'message',\n                    formatMessage(botName, `${username} has joined the chat`)\n                );\n\n            // Send users and room info\n            io.to(room).emit('roomUsers', {\n            room: room,\n            users: getRoomUsers(room)\n            });\n        });\n\n        // Listen for chatMessage\n        socket.on('chatMessage', msg => {\n            let full_msg = formatMessage(username, msg);\n            saveChatHistory(room, username, full_msg.text, full_msg.time);\n            io.to(room).emit('message', formatMessage(username, msg));\n        });\n\n        // Runs when client disconnects\n        socket.on('disconnect', () => {\n            const user = userLeave(username, room);\n\n            if (user) {\n            io.to(room).emit(\n                'message',\n                formatMessage(botName, `${username} has left the chat`)\n            );\n\n            // Send users and room info\n            io.to(room).emit('roomUsers', {\n                room: room,\n                users: getRoomUsers(room)\n            });\n            }\n        });\n    });\n};\n\nfunction saveChatHistory(room, username, body, time) {\n    Chat.findOneAndUpdate({room_name: room}, \n        {\n            \"$push\": {\n                \"chat_history\": {\n                    username,\n                    time,\n                    body\n                }\n            }\n        }, { upsert : true })\n        .then((result) => {\n            console.log(`chat history saved`);\n        })\n        .catch(err => console.log(err));\n}\n\nmodule.exports = webSocket;\n"],"file":"chat.controller.js"}
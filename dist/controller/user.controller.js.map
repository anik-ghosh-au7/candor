{"version":3,"sources":["../../src/controller/user.controller.js"],"names":["User","require","validationResult","bcrypt","jwt","nodemailer","config","cloudinary","buff2Str","dict","image_url","imageContent","user_controller","createUser","req","res","user","redirect","errors","body","email","OTP","status","send","isEmpty","json","array","file","originalname","buffer","content","uploader","upload","err","imageResponse","console","log","secure_url","hash","password","hashed_password","entry","username","phone","save","message","render","login","findOne","data","msg","compare","accessToken","sign","name","img","process","env","jwt_key","cookie","maxAge","httpOnly","loginPage","signPage","request_otp","otp","generateOTP","clearInterval","clearOTP","main","createTestAccount","testAccount","transporter","createTransport","service","host","auth","email_otp_id","port","secure","pass","email_otp_password","sendMail","from","to","subject","text","html","info","then","error","submit_otp","query","logout","clearCookie","digits","i","Math","floor","random","key","setTimeout","module","exports"],"mappings":"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","sourcesContent":["const User = require('../model/user.model');\nconst {validationResult} = require('express-validator');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst nodemailer = require('nodemailer');\nrequire('dotenv').config();\nconst cloudinary = require('../utils/cloudinary');\nconst buff2Str = require('../utils/convertBuffToStr');\n\nvar dict = {};\nlet image_url;\nlet imageContent;\n\nconst user_controller = {\n\n    createUser: async (req, res) => {\n        if (req.user) {\n            return res.redirect('/');\n        }\n        const errors = validationResult(req);\n\n        if (!dict[req.body.email] || dict[req.body.email][0] !== req.body.OTP) {\n            return res.status(400).send('Wrong OTP ');\n        }\n\n        if (!errors.isEmpty()) {\n            return res.status(422).json({errors: errors.array()});\n        }\n        ;\n        if (req.file) {\n            imageContent = buff2Str(req.file.originalname, req.file.buffer).content;\n            await cloudinary.uploader.upload(imageContent, (err, imageResponse) => {\n                if (err) console.log(err);\n                else {\n                    // console.log(imageResponse);\n                    image_url = imageResponse.secure_url;\n                    console.log('log from cloudinary', image_url)\n                }\n            });\n\n        }\n\n        try {\n            let hashed_password = await bcrypt.hash(req.body.password, 5);\n            let entry = new User({\n                username: req.body.username,\n                password: hashed_password,\n                email: req.body.email,\n                phone: req.body.phone,\n                image_url: image_url\n            });\n            if(!entry.image_url){\n                delete entry.image_url;\n            }\n            console.log(entry);\n            entry.save(function (err) {\n                if (err) {\n                    // not acceptable\n                    res.status(406).send(err.message);\n                } else {\n                    // created\n                    res.render('login');\n                }\n            });\n        } catch {\n            res.status(500).send('Internal error occured')\n        }\n        ;\n    },\n\n    login: (req, res) => {\n        if (req.user) {\n            return res.redirect('/');\n        }\n        let username = req.body.username;\n        let password = req.body.password;\n        User.findOne({username}, async (err, data) => {\n            if (err) {\n                // Internal server error\n                res.status(500).send({msg: \"Internal Server Error\"});\n            } else {\n                // OK\n                if (data) {\n                    try {\n                        if (await bcrypt.compare(password, data.password)) {\n                            const accessToken = jwt.sign({\n                                name: username,\n                                img: data.image_url,\n                                email: data.email,\n                                phone: data.phone\n                            }, process.env.jwt_key);\n                            res.cookie('awtToken', accessToken, {maxAge: 9000000, httpOnly: true});\n                            return res.redirect('/');\n                        } else {\n                            res.status(401).send('Unauthorized access');\n                        }\n                    } catch (err) {\n                        console.log(err);\n                        res.status(400).send('Bad request');\n                    }\n                } else {\n                    // no data\n                    // res.status(204).send(data);\n                    res.redirect('/');\n                }\n            }\n            ;\n        });\n    },\n\n    loginPage: (req, res) => {\n        if (req.user) {\n            return res.redirect('/');\n        }\n        res.render('login');\n    },\n    signPage: (req, res) => {\n        if (req.user) {\n            return res.redirect('/');\n        }\n        res.render('signUp');\n    },\n    request_otp: (req, res) => {\n        let email = req.body.email;\n        let otp = generateOTP();\n        console.log(otp);\n        if (dict[email]) {\n            clearInterval(dict[email][1]);\n            delete dict[email];\n        }\n        dict[email] = [otp, clearOTP(dict, email)];\n\n        async function main() {\n            // Generate test SMTP service account from ethereal.email\n            // Only needed if you don't have a real mail account for testing\n            let testAccount = await nodemailer.createTestAccount();\n\n            // create reusable transporter object using the default SMTP transport\n            let transporter = nodemailer.createTransport({\n                service: 'gmail',\n                host: 'smtp.gmail.com',\n                auth: {\n                    user: process.env.email_otp_id, // generated ethereal user\n                    port: 465,\n                    secure: true,\n                    pass: process.env.email_otp_password, // generated ethereal password\n                },\n            });\n\n            // send mail with defined transport object\n            let info = await transporter.sendMail({\n                from: \"Candor \", // sender address\n                to: email, // list of receivers\n                subject: \"OTP from Candor\", // Subject line\n                text: `For sign up to Candor, please use this OTP ${otp}. This OTP will be valid for 30 mins`, // plain text body\n                html: `<b><H2>For sign up, please use this OTP ${otp}</H2><br> OTP will be valid for 30 mins</b>` // html body\n            });\n        }\n\n        main().then(() => res.send('OTP sent')).catch(() => {\n            console.error();\n        })\n    },\n    submit_otp: (req, res) => {\n        let otp = req.query.otp;\n        let email = req.query.email;\n        if (dict[email] && dict[email][0] === otp) {\n            res.send('OTP verified')\n        } else {\n            res.send('Wrong OTP');\n        }\n    },\n    logout: (req, res) => {\n        res.clearCookie('awtToken')\n        res.render('logged_out')\n    }\n};\n\n\nfunction generateOTP() {\n\n    // Declare a digits variable\n    // which stores all digits\n    var digits = '0123456789';\n    let OTP = '';\n    for (let i = 0; i < 6; i++) {\n        OTP += digits[Math.floor(Math.random() * 10)];\n    }\n    return OTP;\n}\n\nfunction clearOTP(dict, key) {\n    return setTimeout(() => {\n        delete dict[key];\n    }, 1000 * 60 * 30);\n}\n\nmodule.exports = user_controller;\n"],"file":"user.controller.js"}